# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spark/connect/relations.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from spark.connect import expressions_pb2 as spark_dot_connect_dot_expressions__pb2
from spark.connect import types_pb2 as spark_dot_connect_dot_types__pb2
from spark.connect import catalog_pb2 as spark_dot_connect_dot_catalog__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1dspark/connect/relations.proto\x12\rspark.connect\x1a\x19google/protobuf/any.proto\x1a\x1fspark/connect/expressions.proto\x1a\x19spark/connect/types.proto\x1a\x1bspark/connect/catalog.proto\"\x94\x14\n\x08Relation\x12-\n\x06\x63ommon\x18\x01 \x01(\x0b\x32\x1d.spark.connect.RelationCommon\x12#\n\x04read\x18\x02 \x01(\x0b\x32\x13.spark.connect.ReadH\x00\x12)\n\x07project\x18\x03 \x01(\x0b\x32\x16.spark.connect.ProjectH\x00\x12\'\n\x06\x66ilter\x18\x04 \x01(\x0b\x32\x15.spark.connect.FilterH\x00\x12#\n\x04join\x18\x05 \x01(\x0b\x32\x13.spark.connect.JoinH\x00\x12-\n\x06set_op\x18\x06 \x01(\x0b\x32\x1b.spark.connect.SetOperationH\x00\x12#\n\x04sort\x18\x07 \x01(\x0b\x32\x13.spark.connect.SortH\x00\x12%\n\x05limit\x18\x08 \x01(\x0b\x32\x14.spark.connect.LimitH\x00\x12-\n\taggregate\x18\t \x01(\x0b\x32\x18.spark.connect.AggregateH\x00\x12!\n\x03sql\x18\n \x01(\x0b\x32\x12.spark.connect.SQLH\x00\x12\x36\n\x0elocal_relation\x18\x0b \x01(\x0b\x32\x1c.spark.connect.LocalRelationH\x00\x12\'\n\x06sample\x18\x0c \x01(\x0b\x32\x15.spark.connect.SampleH\x00\x12\'\n\x06offset\x18\r \x01(\x0b\x32\x15.spark.connect.OffsetH\x00\x12\x31\n\x0b\x64\x65\x64uplicate\x18\x0e \x01(\x0b\x32\x1a.spark.connect.DeduplicateH\x00\x12%\n\x05range\x18\x0f \x01(\x0b\x32\x14.spark.connect.RangeH\x00\x12\x36\n\x0esubquery_alias\x18\x10 \x01(\x0b\x32\x1c.spark.connect.SubqueryAliasH\x00\x12\x31\n\x0brepartition\x18\x11 \x01(\x0b\x32\x1a.spark.connect.RepartitionH\x00\x12$\n\x05to_df\x18\x12 \x01(\x0b\x32\x13.spark.connect.ToDFH\x00\x12\x41\n\x14with_columns_renamed\x18\x13 \x01(\x0b\x32!.spark.connect.WithColumnsRenamedH\x00\x12\x30\n\x0bshow_string\x18\x14 \x01(\x0b\x32\x19.spark.connect.ShowStringH\x00\x12#\n\x04\x64rop\x18\x15 \x01(\x0b\x32\x13.spark.connect.DropH\x00\x12#\n\x04tail\x18\x16 \x01(\x0b\x32\x13.spark.connect.TailH\x00\x12\x32\n\x0cwith_columns\x18\x17 \x01(\x0b\x32\x1a.spark.connect.WithColumnsH\x00\x12#\n\x04hint\x18\x18 \x01(\x0b\x32\x13.spark.connect.HintH\x00\x12)\n\x07unpivot\x18\x19 \x01(\x0b\x32\x16.spark.connect.UnpivotH\x00\x12,\n\tto_schema\x18\x1a \x01(\x0b\x32\x17.spark.connect.ToSchemaH\x00\x12K\n\x19repartition_by_expression\x18\x1b \x01(\x0b\x32&.spark.connect.RepartitionByExpressionH\x00\x12\x36\n\x0emap_partitions\x18\x1c \x01(\x0b\x32\x1c.spark.connect.MapPartitionsH\x00\x12\x38\n\x0f\x63ollect_metrics\x18\x1d \x01(\x0b\x32\x1d.spark.connect.CollectMetricsH\x00\x12%\n\x05parse\x18\x1e \x01(\x0b\x32\x14.spark.connect.ParseH\x00\x12,\n\tgroup_map\x18\x1f \x01(\x0b\x32\x17.spark.connect.GroupMapH\x00\x12\x31\n\x0c\x63o_group_map\x18  \x01(\x0b\x32\x19.spark.connect.CoGroupMapH\x00\x12\x36\n\x0ewith_watermark\x18! \x01(\x0b\x32\x1c.spark.connect.WithWatermarkH\x00\x12K\n\x1a\x61pply_in_pandas_with_state\x18\" \x01(\x0b\x32%.spark.connect.ApplyInPandasWithStateH\x00\x12\x30\n\x0bhtml_string\x18# \x01(\x0b\x32\x19.spark.connect.HtmlStringH\x00\x12\x43\n\x15\x63\x61\x63hed_local_relation\x18$ \x01(\x0b\x32\".spark.connect.CachedLocalRelationH\x00\x12\x45\n\x16\x63\x61\x63hed_remote_relation\x18% \x01(\x0b\x32#.spark.connect.CachedRemoteRelationH\x00\x12h\n)common_inline_user_defined_table_function\x18& \x01(\x0b\x32\x33.spark.connect.CommonInlineUserDefinedTableFunctionH\x00\x12(\n\x07\x66ill_na\x18Z \x01(\x0b\x32\x15.spark.connect.NAFillH\x00\x12(\n\x07\x64rop_na\x18[ \x01(\x0b\x32\x15.spark.connect.NADropH\x00\x12+\n\x07replace\x18\\ \x01(\x0b\x32\x18.spark.connect.NAReplaceH\x00\x12-\n\x07summary\x18\x64 \x01(\x0b\x32\x1a.spark.connect.StatSummaryH\x00\x12/\n\x08\x63rosstab\x18\x65 \x01(\x0b\x32\x1b.spark.connect.StatCrosstabH\x00\x12/\n\x08\x64\x65scribe\x18\x66 \x01(\x0b\x32\x1b.spark.connect.StatDescribeH\x00\x12%\n\x03\x63ov\x18g \x01(\x0b\x32\x16.spark.connect.StatCovH\x00\x12\'\n\x04\x63orr\x18h \x01(\x0b\x32\x17.spark.connect.StatCorrH\x00\x12<\n\x0f\x61pprox_quantile\x18i \x01(\x0b\x32!.spark.connect.StatApproxQuantileH\x00\x12\x32\n\nfreq_items\x18j \x01(\x0b\x32\x1c.spark.connect.StatFreqItemsH\x00\x12\x30\n\tsample_by\x18k \x01(\x0b\x32\x1b.spark.connect.StatSampleByH\x00\x12*\n\x07\x63\x61talog\x18\xc8\x01 \x01(\x0b\x32\x16.spark.connect.CatalogH\x00\x12*\n\textension\x18\xe6\x07 \x01(\x0b\x32\x14.google.protobuf.AnyH\x00\x12*\n\x07unknown\x18\xe7\x07 \x01(\x0b\x32\x16.spark.connect.UnknownH\x00\x42\n\n\x08rel_type\"\t\n\x07Unknown\"G\n\x0eRelationCommon\x12\x13\n\x0bsource_info\x18\x01 \x01(\t\x12\x14\n\x07plan_id\x18\x02 \x01(\x03H\x00\x88\x01\x01\x42\n\n\x08_plan_id\"\xc5\x01\n\x03SQL\x12\r\n\x05query\x18\x01 \x01(\t\x12*\n\x04\x61rgs\x18\x02 \x03(\x0b\x32\x1c.spark.connect.SQL.ArgsEntry\x12\x33\n\x08pos_args\x18\x03 \x03(\x0b\x32!.spark.connect.Expression.Literal\x1aN\n\tArgsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x30\n\x05value\x18\x02 \x01(\x0b\x32!.spark.connect.Expression.Literal:\x02\x38\x01\"\x91\x04\n\x04Read\x12\x35\n\x0bnamed_table\x18\x01 \x01(\x0b\x32\x1e.spark.connect.Read.NamedTableH\x00\x12\x35\n\x0b\x64\x61ta_source\x18\x02 \x01(\x0b\x32\x1e.spark.connect.Read.DataSourceH\x00\x12\x14\n\x0cis_streaming\x18\x03 \x01(\x08\x1a\x97\x01\n\nNamedTable\x12\x1b\n\x13unparsed_identifier\x18\x01 \x01(\t\x12<\n\x07options\x18\x02 \x03(\x0b\x32+.spark.connect.Read.NamedTable.OptionsEntry\x1a.\n\x0cOptionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\xdd\x01\n\nDataSource\x12\x13\n\x06\x66ormat\x18\x01 \x01(\tH\x00\x88\x01\x01\x12\x13\n\x06schema\x18\x02 \x01(\tH\x01\x88\x01\x01\x12<\n\x07options\x18\x03 \x03(\x0b\x32+.spark.connect.Read.DataSource.OptionsEntry\x12\r\n\x05paths\x18\x04 \x03(\t\x12\x12\n\npredicates\x18\x05 \x03(\t\x1a.\n\x0cOptionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\t\n\x07_formatB\t\n\x07_schemaB\x0b\n\tread_type\"a\n\x07Project\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12.\n\x0b\x65xpressions\x18\x03 \x03(\x0b\x32\x19.spark.connect.Expression\"^\n\x06\x46ilter\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12,\n\tcondition\x18\x02 \x01(\x0b\x32\x19.spark.connect.Expression\"\xb6\x04\n\x04Join\x12%\n\x04left\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12&\n\x05right\x18\x02 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x31\n\x0ejoin_condition\x18\x03 \x01(\x0b\x32\x19.spark.connect.Expression\x12/\n\tjoin_type\x18\x04 \x01(\x0e\x32\x1c.spark.connect.Join.JoinType\x12\x15\n\rusing_columns\x18\x05 \x03(\t\x12=\n\x0ejoin_data_type\x18\x06 \x01(\x0b\x32 .spark.connect.Join.JoinDataTypeH\x00\x88\x01\x01\x1a?\n\x0cJoinDataType\x12\x16\n\x0eis_left_struct\x18\x01 \x01(\x08\x12\x17\n\x0fis_right_struct\x18\x02 \x01(\x08\"\xd0\x01\n\x08JoinType\x12\x19\n\x15JOIN_TYPE_UNSPECIFIED\x10\x00\x12\x13\n\x0fJOIN_TYPE_INNER\x10\x01\x12\x18\n\x14JOIN_TYPE_FULL_OUTER\x10\x02\x12\x18\n\x14JOIN_TYPE_LEFT_OUTER\x10\x03\x12\x19\n\x15JOIN_TYPE_RIGHT_OUTER\x10\x04\x12\x17\n\x13JOIN_TYPE_LEFT_ANTI\x10\x05\x12\x17\n\x13JOIN_TYPE_LEFT_SEMI\x10\x06\x12\x13\n\x0fJOIN_TYPE_CROSS\x10\x07\x42\x11\n\x0f_join_data_type\"\x99\x03\n\x0cSetOperation\x12+\n\nleft_input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12,\n\x0bright_input\x18\x02 \x01(\x0b\x32\x17.spark.connect.Relation\x12:\n\x0bset_op_type\x18\x03 \x01(\x0e\x32%.spark.connect.SetOperation.SetOpType\x12\x13\n\x06is_all\x18\x04 \x01(\x08H\x00\x88\x01\x01\x12\x14\n\x07\x62y_name\x18\x05 \x01(\x08H\x01\x88\x01\x01\x12\"\n\x15\x61llow_missing_columns\x18\x06 \x01(\x08H\x02\x88\x01\x01\"r\n\tSetOpType\x12\x1b\n\x17SET_OP_TYPE_UNSPECIFIED\x10\x00\x12\x19\n\x15SET_OP_TYPE_INTERSECT\x10\x01\x12\x15\n\x11SET_OP_TYPE_UNION\x10\x02\x12\x16\n\x12SET_OP_TYPE_EXCEPT\x10\x03\x42\t\n\x07_is_allB\n\n\x08_by_nameB\x18\n\x16_allow_missing_columns\">\n\x05Limit\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\r\n\x05limit\x18\x02 \x01(\x05\"@\n\x06Offset\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0e\n\x06offset\x18\x02 \x01(\x05\"=\n\x04Tail\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\r\n\x05limit\x18\x02 \x01(\x05\"\xf5\x03\n\tAggregate\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x36\n\ngroup_type\x18\x02 \x01(\x0e\x32\".spark.connect.Aggregate.GroupType\x12\x37\n\x14grouping_expressions\x18\x03 \x03(\x0b\x32\x19.spark.connect.Expression\x12\x38\n\x15\x61ggregate_expressions\x18\x04 \x03(\x0b\x32\x19.spark.connect.Expression\x12-\n\x05pivot\x18\x05 \x01(\x0b\x32\x1e.spark.connect.Aggregate.Pivot\x1a\x62\n\x05Pivot\x12&\n\x03\x63ol\x18\x01 \x01(\x0b\x32\x19.spark.connect.Expression\x12\x31\n\x06values\x18\x02 \x03(\x0b\x32!.spark.connect.Expression.Literal\"\x81\x01\n\tGroupType\x12\x1a\n\x16GROUP_TYPE_UNSPECIFIED\x10\x00\x12\x16\n\x12GROUP_TYPE_GROUPBY\x10\x01\x12\x15\n\x11GROUP_TYPE_ROLLUP\x10\x02\x12\x13\n\x0fGROUP_TYPE_CUBE\x10\x03\x12\x14\n\x10GROUP_TYPE_PIVOT\x10\x04\"\x88\x01\n\x04Sort\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x32\n\x05order\x18\x02 \x03(\x0b\x32#.spark.connect.Expression.SortOrder\x12\x16\n\tis_global\x18\x03 \x01(\x08H\x00\x88\x01\x01\x42\x0c\n\n_is_global\"p\n\x04\x44rop\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12*\n\x07\x63olumns\x18\x02 \x03(\x0b\x32\x19.spark.connect.Expression\x12\x14\n\x0c\x63olumn_names\x18\x03 \x03(\t\"\xb9\x01\n\x0b\x44\x65\x64uplicate\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x14\n\x0c\x63olumn_names\x18\x02 \x03(\t\x12 \n\x13\x61ll_columns_as_keys\x18\x03 \x01(\x08H\x00\x88\x01\x01\x12\x1d\n\x10within_watermark\x18\x04 \x01(\x08H\x01\x88\x01\x01\x42\x16\n\x14_all_columns_as_keysB\x13\n\x11_within_watermark\"K\n\rLocalRelation\x12\x11\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x88\x01\x01\x12\x13\n\x06schema\x18\x02 \x01(\tH\x01\x88\x01\x01\x42\x07\n\x05_dataB\t\n\x07_schema\"B\n\x13\x43\x61\x63hedLocalRelation\x12\x0c\n\x04hash\x18\x03 \x01(\tJ\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03R\x06userIdR\tsessionId\"+\n\x14\x43\x61\x63hedRemoteRelation\x12\x13\n\x0brelation_id\x18\x01 \x01(\t\"\xc7\x01\n\x06Sample\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x13\n\x0blower_bound\x18\x02 \x01(\x01\x12\x13\n\x0bupper_bound\x18\x03 \x01(\x01\x12\x1d\n\x10with_replacement\x18\x04 \x01(\x08H\x00\x88\x01\x01\x12\x11\n\x04seed\x18\x05 \x01(\x03H\x01\x88\x01\x01\x12\x1b\n\x13\x64\x65terministic_order\x18\x06 \x01(\x08\x42\x13\n\x11_with_replacementB\x07\n\x05_seed\"p\n\x05Range\x12\x12\n\x05start\x18\x01 \x01(\x03H\x00\x88\x01\x01\x12\x0b\n\x03\x65nd\x18\x02 \x01(\x03\x12\x0c\n\x04step\x18\x03 \x01(\x03\x12\x1b\n\x0enum_partitions\x18\x04 \x01(\x05H\x01\x88\x01\x01\x42\x08\n\x06_startB\x11\n\x0f_num_partitions\"Y\n\rSubqueryAlias\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\r\n\x05\x61lias\x18\x02 \x01(\t\x12\x11\n\tqualifier\x18\x03 \x03(\t\"o\n\x0bRepartition\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x16\n\x0enum_partitions\x18\x02 \x01(\x05\x12\x14\n\x07shuffle\x18\x03 \x01(\x08H\x00\x88\x01\x01\x42\n\n\x08_shuffle\"j\n\nShowString\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x10\n\x08num_rows\x18\x02 \x01(\x05\x12\x10\n\x08truncate\x18\x03 \x01(\x05\x12\x10\n\x08vertical\x18\x04 \x01(\x08\"X\n\nHtmlString\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x10\n\x08num_rows\x18\x02 \x01(\x05\x12\x10\n\x08truncate\x18\x03 \x01(\x05\"I\n\x0bStatSummary\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x12\n\nstatistics\x18\x02 \x03(\t\"D\n\x0cStatDescribe\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ols\x18\x02 \x03(\t\"R\n\x0cStatCrosstab\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ol1\x18\x02 \x01(\t\x12\x0c\n\x04\x63ol2\x18\x03 \x01(\t\"M\n\x07StatCov\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ol1\x18\x02 \x01(\t\x12\x0c\n\x04\x63ol2\x18\x03 \x01(\t\"n\n\x08StatCorr\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ol1\x18\x02 \x01(\t\x12\x0c\n\x04\x63ol2\x18\x03 \x01(\t\x12\x13\n\x06method\x18\x04 \x01(\tH\x00\x88\x01\x01\x42\t\n\x07_method\"y\n\x12StatApproxQuantile\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ols\x18\x02 \x03(\t\x12\x15\n\rprobabilities\x18\x03 \x03(\x01\x12\x16\n\x0erelative_error\x18\x04 \x01(\x01\"g\n\rStatFreqItems\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ols\x18\x02 \x03(\t\x12\x14\n\x07support\x18\x03 \x01(\x01H\x00\x88\x01\x01\x42\n\n\x08_support\"\x85\x02\n\x0cStatSampleBy\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12&\n\x03\x63ol\x18\x02 \x01(\x0b\x32\x19.spark.connect.Expression\x12\x37\n\tfractions\x18\x03 \x03(\x0b\x32$.spark.connect.StatSampleBy.Fraction\x12\x11\n\x04seed\x18\x05 \x01(\x03H\x00\x88\x01\x01\x1aP\n\x08\x46raction\x12\x32\n\x07stratum\x18\x01 \x01(\x0b\x32!.spark.connect.Expression.Literal\x12\x10\n\x08\x66raction\x18\x02 \x01(\x01\x42\x07\n\x05_seed\"q\n\x06NAFill\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ols\x18\x02 \x03(\t\x12\x31\n\x06values\x18\x03 \x03(\x0b\x32!.spark.connect.Expression.Literal\"l\n\x06NADrop\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ols\x18\x02 \x03(\t\x12\x1a\n\rmin_non_nulls\x18\x03 \x01(\x05H\x00\x88\x01\x01\x42\x10\n\x0e_min_non_nulls\"\xf8\x01\n\tNAReplace\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04\x63ols\x18\x02 \x03(\t\x12:\n\x0creplacements\x18\x03 \x03(\x0b\x32$.spark.connect.NAReplace.Replacement\x1ay\n\x0bReplacement\x12\x34\n\told_value\x18\x01 \x01(\x0b\x32!.spark.connect.Expression.Literal\x12\x34\n\tnew_value\x18\x02 \x01(\x0b\x32!.spark.connect.Expression.Literal\"D\n\x04ToDF\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x14\n\x0c\x63olumn_names\x18\x02 \x03(\t\"\xca\x01\n\x12WithColumnsRenamed\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12S\n\x12rename_columns_map\x18\x02 \x03(\x0b\x32\x37.spark.connect.WithColumnsRenamed.RenameColumnsMapEntry\x1a\x37\n\x15RenameColumnsMapEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"g\n\x0bWithColumns\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x30\n\x07\x61liases\x18\x02 \x03(\x0b\x32\x1f.spark.connect.Expression.Alias\"d\n\rWithWatermark\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x12\n\nevent_time\x18\x02 \x01(\t\x12\x17\n\x0f\x64\x65lay_threshold\x18\x03 \x01(\t\"k\n\x04Hint\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04name\x18\x02 \x01(\t\x12-\n\nparameters\x18\x03 \x03(\x0b\x32\x19.spark.connect.Expression\"\x86\x02\n\x07Unpivot\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12&\n\x03ids\x18\x02 \x03(\x0b\x32\x19.spark.connect.Expression\x12\x32\n\x06values\x18\x03 \x01(\x0b\x32\x1d.spark.connect.Unpivot.ValuesH\x00\x88\x01\x01\x12\x1c\n\x14variable_column_name\x18\x04 \x01(\t\x12\x19\n\x11value_column_name\x18\x05 \x01(\t\x1a\x33\n\x06Values\x12)\n\x06values\x18\x01 \x03(\x0b\x32\x19.spark.connect.ExpressionB\t\n\x07_values\"[\n\x08ToSchema\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\'\n\x06schema\x18\x02 \x01(\x0b\x32\x17.spark.connect.DataType\"\xa5\x01\n\x17RepartitionByExpression\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x32\n\x0fpartition_exprs\x18\x02 \x03(\x0b\x32\x19.spark.connect.Expression\x12\x1b\n\x0enum_partitions\x18\x03 \x01(\x05H\x00\x88\x01\x01\x42\x11\n\x0f_num_partitions\"\x9d\x01\n\rMapPartitions\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12<\n\x04\x66unc\x18\x02 \x01(\x0b\x32..spark.connect.CommonInlineUserDefinedFunction\x12\x17\n\nis_barrier\x18\x03 \x01(\x08H\x00\x88\x01\x01\x42\r\n\x0b_is_barrier\"\xec\x03\n\x08GroupMap\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x37\n\x14grouping_expressions\x18\x02 \x03(\x0b\x32\x19.spark.connect.Expression\x12<\n\x04\x66unc\x18\x03 \x01(\x0b\x32..spark.connect.CommonInlineUserDefinedFunction\x12\x36\n\x13sorting_expressions\x18\x04 \x03(\x0b\x32\x19.spark.connect.Expression\x12.\n\rinitial_input\x18\x05 \x01(\x0b\x32\x17.spark.connect.Relation\x12?\n\x1cinitial_grouping_expressions\x18\x06 \x03(\x0b\x32\x19.spark.connect.Expression\x12%\n\x18is_map_groups_with_state\x18\x07 \x01(\x08H\x00\x88\x01\x01\x12\x18\n\x0boutput_mode\x18\x08 \x01(\tH\x01\x88\x01\x01\x12\x19\n\x0ctimeout_conf\x18\t \x01(\tH\x02\x88\x01\x01\x42\x1b\n\x19_is_map_groups_with_stateB\x0e\n\x0c_output_modeB\x0f\n\r_timeout_conf\"\x94\x03\n\nCoGroupMap\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12=\n\x1ainput_grouping_expressions\x18\x02 \x03(\x0b\x32\x19.spark.connect.Expression\x12&\n\x05other\x18\x03 \x01(\x0b\x32\x17.spark.connect.Relation\x12=\n\x1aother_grouping_expressions\x18\x04 \x03(\x0b\x32\x19.spark.connect.Expression\x12<\n\x04\x66unc\x18\x05 \x01(\x0b\x32..spark.connect.CommonInlineUserDefinedFunction\x12<\n\x19input_sorting_expressions\x18\x06 \x03(\x0b\x32\x19.spark.connect.Expression\x12<\n\x19other_sorting_expressions\x18\x07 \x03(\x0b\x32\x19.spark.connect.Expression\"\x8f\x02\n\x16\x41pplyInPandasWithState\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x37\n\x14grouping_expressions\x18\x02 \x03(\x0b\x32\x19.spark.connect.Expression\x12<\n\x04\x66unc\x18\x03 \x01(\x0b\x32..spark.connect.CommonInlineUserDefinedFunction\x12\x15\n\routput_schema\x18\x04 \x01(\t\x12\x14\n\x0cstate_schema\x18\x05 \x01(\t\x12\x13\n\x0boutput_mode\x18\x06 \x01(\t\x12\x14\n\x0ctimeout_conf\x18\x07 \x01(\t\"\xc0\x01\n$CommonInlineUserDefinedTableFunction\x12\x15\n\rfunction_name\x18\x01 \x01(\t\x12\x15\n\rdeterministic\x18\x02 \x01(\x08\x12,\n\targuments\x18\x03 \x03(\x0b\x32\x19.spark.connect.Expression\x12\x30\n\x0bpython_udtf\x18\x04 \x01(\x0b\x32\x19.spark.connect.PythonUDTFH\x00\x42\n\n\x08\x66unction\"\x87\x01\n\nPythonUDTF\x12\x31\n\x0breturn_type\x18\x01 \x01(\x0b\x32\x17.spark.connect.DataTypeH\x00\x88\x01\x01\x12\x11\n\teval_type\x18\x02 \x01(\x05\x12\x0f\n\x07\x63ommand\x18\x03 \x01(\x0c\x12\x12\n\npython_ver\x18\x04 \x01(\tB\x0e\n\x0c_return_type\"r\n\x0e\x43ollectMetrics\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x0c\n\x04name\x18\x02 \x01(\t\x12*\n\x07metrics\x18\x03 \x03(\x0b\x32\x19.spark.connect.Expression\"\xd8\x02\n\x05Parse\x12&\n\x05input\x18\x01 \x01(\x0b\x32\x17.spark.connect.Relation\x12\x30\n\x06\x66ormat\x18\x02 \x01(\x0e\x32 .spark.connect.Parse.ParseFormat\x12,\n\x06schema\x18\x03 \x01(\x0b\x32\x17.spark.connect.DataTypeH\x00\x88\x01\x01\x12\x32\n\x07options\x18\x04 \x03(\x0b\x32!.spark.connect.Parse.OptionsEntry\x1a.\n\x0cOptionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"X\n\x0bParseFormat\x12\x1c\n\x18PARSE_FORMAT_UNSPECIFIED\x10\x00\x12\x14\n\x10PARSE_FORMAT_CSV\x10\x01\x12\x15\n\x11PARSE_FORMAT_JSON\x10\x02\x42\t\n\x07_schemaB6\n\x1eorg.apache.spark.connect.protoP\x01Z\x12internal/generatedb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'spark.connect.relations_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\036org.apache.spark.connect.protoP\001Z\022internal/generated'
  _globals['_SQL_ARGSENTRY']._options = None
  _globals['_SQL_ARGSENTRY']._serialized_options = b'8\001'
  _globals['_READ_NAMEDTABLE_OPTIONSENTRY']._options = None
  _globals['_READ_NAMEDTABLE_OPTIONSENTRY']._serialized_options = b'8\001'
  _globals['_READ_DATASOURCE_OPTIONSENTRY']._options = None
  _globals['_READ_DATASOURCE_OPTIONSENTRY']._serialized_options = b'8\001'
  _globals['_WITHCOLUMNSRENAMED_RENAMECOLUMNSMAPENTRY']._options = None
  _globals['_WITHCOLUMNSRENAMED_RENAMECOLUMNSMAPENTRY']._serialized_options = b'8\001'
  _globals['_PARSE_OPTIONSENTRY']._options = None
  _globals['_PARSE_OPTIONSENTRY']._serialized_options = b'8\001'
  _globals['_RELATION']._serialized_start=165
  _globals['_RELATION']._serialized_end=2745
  _globals['_UNKNOWN']._serialized_start=2747
  _globals['_UNKNOWN']._serialized_end=2756
  _globals['_RELATIONCOMMON']._serialized_start=2758
  _globals['_RELATIONCOMMON']._serialized_end=2829
  _globals['_SQL']._serialized_start=2832
  _globals['_SQL']._serialized_end=3029
  _globals['_SQL_ARGSENTRY']._serialized_start=2951
  _globals['_SQL_ARGSENTRY']._serialized_end=3029
  _globals['_READ']._serialized_start=3032
  _globals['_READ']._serialized_end=3561
  _globals['_READ_NAMEDTABLE']._serialized_start=3173
  _globals['_READ_NAMEDTABLE']._serialized_end=3324
  _globals['_READ_NAMEDTABLE_OPTIONSENTRY']._serialized_start=3278
  _globals['_READ_NAMEDTABLE_OPTIONSENTRY']._serialized_end=3324
  _globals['_READ_DATASOURCE']._serialized_start=3327
  _globals['_READ_DATASOURCE']._serialized_end=3548
  _globals['_READ_DATASOURCE_OPTIONSENTRY']._serialized_start=3278
  _globals['_READ_DATASOURCE_OPTIONSENTRY']._serialized_end=3324
  _globals['_PROJECT']._serialized_start=3563
  _globals['_PROJECT']._serialized_end=3660
  _globals['_FILTER']._serialized_start=3662
  _globals['_FILTER']._serialized_end=3756
  _globals['_JOIN']._serialized_start=3759
  _globals['_JOIN']._serialized_end=4325
  _globals['_JOIN_JOINDATATYPE']._serialized_start=4032
  _globals['_JOIN_JOINDATATYPE']._serialized_end=4095
  _globals['_JOIN_JOINTYPE']._serialized_start=4098
  _globals['_JOIN_JOINTYPE']._serialized_end=4306
  _globals['_SETOPERATION']._serialized_start=4328
  _globals['_SETOPERATION']._serialized_end=4737
  _globals['_SETOPERATION_SETOPTYPE']._serialized_start=4574
  _globals['_SETOPERATION_SETOPTYPE']._serialized_end=4688
  _globals['_LIMIT']._serialized_start=4739
  _globals['_LIMIT']._serialized_end=4801
  _globals['_OFFSET']._serialized_start=4803
  _globals['_OFFSET']._serialized_end=4867
  _globals['_TAIL']._serialized_start=4869
  _globals['_TAIL']._serialized_end=4930
  _globals['_AGGREGATE']._serialized_start=4933
  _globals['_AGGREGATE']._serialized_end=5434
  _globals['_AGGREGATE_PIVOT']._serialized_start=5204
  _globals['_AGGREGATE_PIVOT']._serialized_end=5302
  _globals['_AGGREGATE_GROUPTYPE']._serialized_start=5305
  _globals['_AGGREGATE_GROUPTYPE']._serialized_end=5434
  _globals['_SORT']._serialized_start=5437
  _globals['_SORT']._serialized_end=5573
  _globals['_DROP']._serialized_start=5575
  _globals['_DROP']._serialized_end=5687
  _globals['_DEDUPLICATE']._serialized_start=5690
  _globals['_DEDUPLICATE']._serialized_end=5875
  _globals['_LOCALRELATION']._serialized_start=5877
  _globals['_LOCALRELATION']._serialized_end=5952
  _globals['_CACHEDLOCALRELATION']._serialized_start=5954
  _globals['_CACHEDLOCALRELATION']._serialized_end=6020
  _globals['_CACHEDREMOTERELATION']._serialized_start=6022
  _globals['_CACHEDREMOTERELATION']._serialized_end=6065
  _globals['_SAMPLE']._serialized_start=6068
  _globals['_SAMPLE']._serialized_end=6267
  _globals['_RANGE']._serialized_start=6269
  _globals['_RANGE']._serialized_end=6381
  _globals['_SUBQUERYALIAS']._serialized_start=6383
  _globals['_SUBQUERYALIAS']._serialized_end=6472
  _globals['_REPARTITION']._serialized_start=6474
  _globals['_REPARTITION']._serialized_end=6585
  _globals['_SHOWSTRING']._serialized_start=6587
  _globals['_SHOWSTRING']._serialized_end=6693
  _globals['_HTMLSTRING']._serialized_start=6695
  _globals['_HTMLSTRING']._serialized_end=6783
  _globals['_STATSUMMARY']._serialized_start=6785
  _globals['_STATSUMMARY']._serialized_end=6858
  _globals['_STATDESCRIBE']._serialized_start=6860
  _globals['_STATDESCRIBE']._serialized_end=6928
  _globals['_STATCROSSTAB']._serialized_start=6930
  _globals['_STATCROSSTAB']._serialized_end=7012
  _globals['_STATCOV']._serialized_start=7014
  _globals['_STATCOV']._serialized_end=7091
  _globals['_STATCORR']._serialized_start=7093
  _globals['_STATCORR']._serialized_end=7203
  _globals['_STATAPPROXQUANTILE']._serialized_start=7205
  _globals['_STATAPPROXQUANTILE']._serialized_end=7326
  _globals['_STATFREQITEMS']._serialized_start=7328
  _globals['_STATFREQITEMS']._serialized_end=7431
  _globals['_STATSAMPLEBY']._serialized_start=7434
  _globals['_STATSAMPLEBY']._serialized_end=7695
  _globals['_STATSAMPLEBY_FRACTION']._serialized_start=7606
  _globals['_STATSAMPLEBY_FRACTION']._serialized_end=7686
  _globals['_NAFILL']._serialized_start=7697
  _globals['_NAFILL']._serialized_end=7810
  _globals['_NADROP']._serialized_start=7812
  _globals['_NADROP']._serialized_end=7920
  _globals['_NAREPLACE']._serialized_start=7923
  _globals['_NAREPLACE']._serialized_end=8171
  _globals['_NAREPLACE_REPLACEMENT']._serialized_start=8050
  _globals['_NAREPLACE_REPLACEMENT']._serialized_end=8171
  _globals['_TODF']._serialized_start=8173
  _globals['_TODF']._serialized_end=8241
  _globals['_WITHCOLUMNSRENAMED']._serialized_start=8244
  _globals['_WITHCOLUMNSRENAMED']._serialized_end=8446
  _globals['_WITHCOLUMNSRENAMED_RENAMECOLUMNSMAPENTRY']._serialized_start=8391
  _globals['_WITHCOLUMNSRENAMED_RENAMECOLUMNSMAPENTRY']._serialized_end=8446
  _globals['_WITHCOLUMNS']._serialized_start=8448
  _globals['_WITHCOLUMNS']._serialized_end=8551
  _globals['_WITHWATERMARK']._serialized_start=8553
  _globals['_WITHWATERMARK']._serialized_end=8653
  _globals['_HINT']._serialized_start=8655
  _globals['_HINT']._serialized_end=8762
  _globals['_UNPIVOT']._serialized_start=8765
  _globals['_UNPIVOT']._serialized_end=9027
  _globals['_UNPIVOT_VALUES']._serialized_start=8965
  _globals['_UNPIVOT_VALUES']._serialized_end=9016
  _globals['_TOSCHEMA']._serialized_start=9029
  _globals['_TOSCHEMA']._serialized_end=9120
  _globals['_REPARTITIONBYEXPRESSION']._serialized_start=9123
  _globals['_REPARTITIONBYEXPRESSION']._serialized_end=9288
  _globals['_MAPPARTITIONS']._serialized_start=9291
  _globals['_MAPPARTITIONS']._serialized_end=9448
  _globals['_GROUPMAP']._serialized_start=9451
  _globals['_GROUPMAP']._serialized_end=9943
  _globals['_COGROUPMAP']._serialized_start=9946
  _globals['_COGROUPMAP']._serialized_end=10350
  _globals['_APPLYINPANDASWITHSTATE']._serialized_start=10353
  _globals['_APPLYINPANDASWITHSTATE']._serialized_end=10624
  _globals['_COMMONINLINEUSERDEFINEDTABLEFUNCTION']._serialized_start=10627
  _globals['_COMMONINLINEUSERDEFINEDTABLEFUNCTION']._serialized_end=10819
  _globals['_PYTHONUDTF']._serialized_start=10822
  _globals['_PYTHONUDTF']._serialized_end=10957
  _globals['_COLLECTMETRICS']._serialized_start=10959
  _globals['_COLLECTMETRICS']._serialized_end=11073
  _globals['_PARSE']._serialized_start=11076
  _globals['_PARSE']._serialized_end=11420
  _globals['_PARSE_OPTIONSENTRY']._serialized_start=3278
  _globals['_PARSE_OPTIONSENTRY']._serialized_end=3324
  _globals['_PARSE_PARSEFORMAT']._serialized_start=11321
  _globals['_PARSE_PARSEFORMAT']._serialized_end=11409
# @@protoc_insertion_point(module_scope)
