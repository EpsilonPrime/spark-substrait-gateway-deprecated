extension_uris {
  extension_uri_anchor: 1
  uri: "/functions_string.yaml"
}
extension_uris {
  extension_uri_anchor: 2
  uri: "/functions_comparison.yaml"
}
extension_uris {
  extension_uri_anchor: 3
  uri: "/functions_set.yaml"
}
extensions {
  extension_function {
    extension_uri_reference: 2
    function_anchor: 2
    name: "equal:str_str"
  }
}
extensions {
  extension_function {
    extension_uri_reference: 3
    function_anchor: 3
    name: "index_in:str_liststr"
  }
}
extensions {
  extension_function {
    extension_uri_reference: 1
    function_anchor: 1
    name: "string_split:str_str"
  }
}
relations {
  root {
    input {
      fetch {
        common {
          direct {
          }
        }
        input {
          sort {
            common {
              direct {
              }
            }
            input {
              aggregate {
                common {
                  direct {
                  }
                }
                input {
                  filter {
                    common {
                      direct {
                      }
                    }
                    input {
                      filter {
                        common {
                          direct {
                          }
                        }
                        input {
                          project {
                            common {
                              emit {
                                output_mapping: 0
                              }
                            }
                            input {
                              project {
                                common {
                                  emit {
                                    output_mapping: 0
                                  }
                                }
                                input {
                                  project {
                                    common {
                                      emit {
                                        output_mapping: 0
                                      }
                                    }
                                    input {
                                      read {
                                        common {
                                          direct {
                                          }
                                        }
                                        base_schema {
                                          names: "mbid"
                                          names: "artist_mb"
                                          names: "artist_lastfm"
                                          names: "country_mb"
                                          names: "country_lastfm"
                                          names: "tags_mb"
                                          names: "tags_lastfm"
                                          names: "listeners_lastfm"
                                          names: "scrobbles_lastfm"
                                          names: "ambiguous_artist"
                                          struct {
                                            types {
                                              string {
                                                nullability: NULLABILITY_REQUIRED
                                              }
                                            }
                                            types {
                                              string {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              string {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              string {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              string {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              string {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              string {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              i32 {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              i32 {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                            types {
                                              bool {
                                                nullability: NULLABILITY_NULLABLE
                                              }
                                            }
                                          }
                                        }
                                        local_files {
                                          items {
                                            uri_file: "/Users/davids/Desktop/artists.parquet"
                                            parquet {
                                            }
                                          }
                                        }
                                      }
                                    }
                                    expressions {
                                      scalar_function {
                                        function_reference: 1
                                        arguments {
                                          value {
                                            selection {
                                              direct_reference {
                                                struct_field {
                                                  field: 6
                                                }
                                              }
                                              root_reference {
                                              }
                                            }
                                          }
                                        }
                                        arguments {
                                          value {
                                            literal {
                                              string: "; "
                                            }
                                          }
                                        }
                                        arguments {
                                          value {
                                            literal {
                                              i32: -1
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                expressions {
                                  cast {
                                    input {
                                      selection {
                                        direct_reference {
                                          struct_field {
                                            field: 7
                                          }
                                        }
                                        root_reference {
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            expressions {
                              cast {
                                input {
                                  selection {
                                    direct_reference {
                                      struct_field {
                                        field: 9
                                      }
                                    }
                                    root_reference {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        condition {
                          scalar_function {
                            function_reference: 2
                            arguments {
                              value {
                                selection {
                                  direct_reference {
                                    struct_field {
                                      field: 9
                                    }
                                  }
                                  root_reference {
                                  }
                                }
                              }
                            }
                            arguments {
                              value {
                                literal {
                                  boolean: false
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    condition {
                      scalar_function {
                        function_reference: 3
                        arguments {
                          value {
                            selection {
                              direct_reference {
                                struct_field {
                                  field: 6
                                }
                              }
                              root_reference {
                              }
                            }
                          }
                        }
                        arguments {
                          value {
                            literal {
                              string: "pop"
                            }
                          }
                        }
                      }
                    }
                  }
                }
                groupings {
                  grouping_expressions {
                    selection {
                      direct_reference {
                        struct_field {
                          field: 2
                        }
                      }
                      root_reference {
                      }
                    }
                  }
                }
                measures {
                  measure {
                  }
                }
              }
            }
            sorts {
              expr {
                selection {
                  direct_reference {
                    struct_field {
                    }
                  }
                  root_reference {
                  }
                }
              }
              direction: SORT_DIRECTION_DESC_NULLS_LAST
            }
          }
        }
        count: 10
      }
    }
  }
}
